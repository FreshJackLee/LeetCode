1.官方枚举解法：
class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        int n = s.size();
        for (int i = 1; i * 2 <= n; ++i) {           //注意i的含义是重复字串的长度！！不是用来遍历这个字符串的，而是用来枚举字串的长度的!!!注意这里的优化不用遍历完全，只需遍历一半即可
            if (n % i == 0) {                        //要点一：如果满足重复的子串，那么首先，字串的长度刚好能被这个字符串整除
                bool match = true;
                for (int j = i; j < n; ++j) {        //j用来遍历这个字符串！！要点二：必然字串是前缀的某个字串，否则矛盾，不可能是重复字串，所以i从1开始，然后j=i!!!
                    if (s[j] != s[j - i]) {          //要点三：满足条件s[j]=s[j-i]可以从固定的滑动窗口（实际并不一样）来理解这个公式！！！（注意本题用滑动窗口有点麻烦，建议用这个！）
                        match = false;               //如果不相等那么匹配失败，本次遍历结束，继续枚举下一个字串的长度！！！
                        break;
                    }
                }
                if (match) {                         //枚举结束后，如果滑动窗口顺利遍历完成，则说明复合题意，返回真
                    return true;
                }
            }
        }
        return false;                               //否则不为重复的子字符串！！！
    }
};
2.双倍字符串的解法：
class Solution {
public:
    bool repeatedSubstringPattern(string s) {
        return (s + s).find(s, 1) != s.size();     //注意看官方双倍字符串的解释，这段代码的含义是，先双倍字符串，然后查找是否含有这个s的子字符串，如果有，那么一定不需要查到单个s的末尾！！！
    }                                              //如果没有查到末尾（s的末尾），则含有s字串，如果查到了末尾即不合题意，不存在重复子串
};            
