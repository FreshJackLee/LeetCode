1.自己的默认暴力解法：超出时间限制了
class Solution {
public:
    int lengthOfLongestSubstring(string s){
        if(s==""){                            //注意不要忘记边界情况，空字符串输出0，其他最少为1
            return 0;
        }
        int cnt=0;                            //计数每个不重复子串的长度，
        int max=1;                            //最大长度，如果满足则替换
        int k=0;                              //利用set不重复来判断是否重复的计数器
        set<char> s1;
        for(int i=0;i<s.size();i++){
            for(int j=i;j<s.size();j++){
                s1.insert(s[j]);
                k++;
                if(s1.size()==k){
                    cnt++;
                }else{
                	if(cnt>max){                //替换最大长度字串
                		max=cnt;
					}	
                	cnt=0;                   //注意这里，一定要重置！！！
                	k=0;                     //注意，计数器这里也要重置！！！
                	s1.clear();              //set也要重置！！！
                    break;
                }
            }
        }

        return max;
    }
};
2.官方解法：利用滑动窗口
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        // 哈希集合，记录每个字符是否出现过
        unordered_set<char> occ;                                             //注意在C++中判断重复的问题可以用set，又因为不需要排序关系，所以我们用unordered_set
        int n = s.size();
        // 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动
        int rk = -1, ans = 0;                                                //滑动窗口即需要左右指针，做指针用来从头到尾遍历即i，右指针初始为-1的愿意是空字串的边界问题
        // 枚举左指针的位置，初始值隐性地表示为 -1
        for (int i = 0; i < n; ++i) {
            if (i != 0) {                                                    //注意因为我们每次没有对unordered_set重置，所以移动过程中除了第一次以后都要把前面的元素给移除了
                // 左指针向右移动一格，移除一个字符
                occ.erase(s[i - 1]);
            }
            while (rk + 1 < n && !occ.count(s[rk + 1])) {                    //返回rk+1下标元素字符的数量，因为是SET,所以只返回1或者0表示存在和不存在，即在字符范围内判断是否重复
                // 不断地移动右指针                                           //没有越界且字符串不重复，右指针向右移动
                occ.insert(s[rk + 1]);                                       //不要只移动指针，要记得把不重复的字符添加到unordered_set中用来判断接下来的字符是否重复的问题！！！
                ++rk;
            }
            // 第 i 到 rk 个字符是一个极长的无重复字符子串
            ans = max(ans, rk - i + 1);                                     //每次统计的次数要和之前的对比，是否为最大然后更新，注意技巧不用加一个cnt变量，长度等于rk-i+1（斗地主算牌？）
        }
        return ans;
    }
};
