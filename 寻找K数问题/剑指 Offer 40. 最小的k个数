class Solution {
public:
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        vector<int> ans;
        if(k==0){
            return ans;
        }
        priority_queue<int> q;
        int len=arr.size();
        for(int i=0;i<len;++i){
            if(k>q.size()){           //这个其实可以放到程序外面，首先做这个，避免后续遍历一直对比，效率降低！！！
                q.push(arr[i]);
            }else{
                if(q.top()>arr[i]){
                    q.pop();
                    q.push(arr[i]);
                }
            }
        }
        while(!q.empty()){
            ans.push_back(q.top());
            q.pop();
        }
        return ans;
    }
};
优化版本：
class Solution {
public:
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        vector<int> vec(k, 0);
        if (k == 0) { // 排除 0 的情况
            return vec;
        }
        priority_queue<int> Q;
        for (int i = 0; i < k; ++i) {
            Q.push(arr[i]);
        }
        for (int i = k; i < (int)arr.size(); ++i) {
            if (Q.top() > arr[i]) {
                Q.pop();
                Q.push(arr[i]);
            }
        }
        for (int i = 0; i < k; ++i) {
            vec[i] = Q.top();
            Q.pop();
        }
        return vec;
    }
};
