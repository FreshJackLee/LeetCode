/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;                           //注意理解其含义，指向下一个节点的指针，即指针域
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* cur=nullptr;                  //同样不要忘记是指向链表类型的指针
        ListNode* pre=head;
        while(pre!=nullptr){
            ListNode* temp=pre->next;           //注意这里不要用pre=pre->next，否则没办法移动cur了
            pre->next=cur;                     //核心操作，翻转链表，即把pre的指针域指向前面的节点
            cur=pre;                           /*cur前进一部，即cur就是之前的pre
            pre=temp;                           pre前进一步，即之前的temp已经前进一步了*/
        }
        return cur;                            //注意最后是return cur不是pre，因为判断条件里pre为空进去了，要翻转最后一个节！！！！这时候第一个节点是cur！！！
    }
};
