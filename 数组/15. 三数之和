1.自己做的完整的源代码（第一步，先没有去重）：
#include<iostream>
#include<vector>
#include<algorithm>                                                   //用到了排序，不要忘记包含头文件algorithm
using namespace std;
class Solution{
public:
	vector<vector<int> > threeSum(vector<int>& nums){
		vector<vector<int> > matrix;                                      //定义一个二维vector用来接收返回值
		sort(nums.begin(),nums.end());
		for(int i=0;i<nums.size();i++){
			int left=i+1;                                                    //左指针（其实不是指针，只是看起来功能像指针，实际上是一个普通的整形变量）
			int right=nums.size()-1;                                         //右指针同上
			while(left<right){                                               //注意这里的条件是left<right!第一次想到的条件为left!=right这个是错的，因为两个相邻的时候同时缩减，程序就出错了
				if(nums[i]+nums[left]+nums[right]>0){
					right--;
				}else if(nums[i]+nums[left]+nums[right]<0){
					left++;
				}else{
					matrix.push_back(vector<int>{nums[i],nums[left],nums[right]});    //注意else后面不能有括号的条件，因为else就相当于defult，千万不要加括号
					left++;
					right--;
				}
			}
		}
	return matrix;                                                             //注意在函数的最后一层返回结果
	}
	void test(vector<vector<int> > &matrix){                                   //仔细体会这个函数是如何利用迭代器遍历输出二维数组vector的！！！
		for(vector<vector<int> >::iterator iter=matrix.begin();iter!=matrix.end();iter++){
			for(vector<int>::iterator it=(*iter).begin();it!=(*iter).end();it++){            //这里是如何操作的！！！
				cout<<*it<<" ";
			}
			cout<<endl;
		}
    }
};
int main(){
	vector<int> nums={-1, 0, 1, 2, -1, -4};
	Solution S1;
	Solution S2;
	vector<vector<int> > m=S1.threeSum(nums);                                            /*这里有个误区，不能用函数的返回值或者现成的值（比如直接传一个整数给函数的参数引用），函数的返回值
	S2.test(m);                                                                           或者直接的整数时没有地址的！！（暂时的理解，不知道对不对目前），同时这里不要忘记创建两个对象！*/
	return 0;
}
2.别人去除的代码：
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        // 找出a + b + c = 0
        // a = nums[i], b = nums[left], c = nums[right]
        for (int i = 0; i < nums.size(); i++) {
            // 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了
            if (nums[i] > 0) {                                                           //这一步属于优化条件
                return result;
            }
            // 错误去重方法，将会漏掉-1,-1,2 这种情况
            /*
            if (nums[i] == nums[i + 1]) {
                continue;
            }
            */
            // 正确去重方法
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int left = i + 1;
            int right = nums.size() - 1;
            while (right > left) {
                // 去重复逻辑如果放在这里，0，0，0 的情况，可能直接导致 right<=left 了，从而漏掉了 0,0,0 这种三元组
                /*
                while (right > left && nums[right] == nums[right - 1]) right--;
                while (right > left && nums[left] == nums[left + 1]) left++;
                */
                if (nums[i] + nums[left] + nums[right] > 0) {
                    right--;
                } else if (nums[i] + nums[left] + nums[right] < 0) {
                    left++;
                } else {
                    result.push_back(vector<int>{nums[i], nums[left], nums[right]});
                    // 去重逻辑应该放在找到一个三元组之后
                    while (right > left && nums[right] == nums[right - 1]) right--;
                    while (right > left && nums[left] == nums[left + 1]) left++;

                    // 找到答案时，双指针同时收缩                                                 //注意是收缩，left向前所以++，right向后所以--
                    right--;
                    left++;
                }
            }

        }
        return result;
    }
};
