1.自己的代码：
class Solution {
public:
    vector<vector<int>> transpose(vector<vector<int>>& A) {
        int row=A.size();
        int col=A[0].size();
        vector<vector<int>> B(col,vector<int>(row,0));
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                 B[j][i]=A[i][j];
            }
        }
        return B;
    }
};
2.思路：矩阵的转置比较简单，经过简单分析就可以得出规律：B【i】【j】=A【j】【i】;
那么思路就很清晰了：1）首先创建一个存储转置后的矩阵B用来接收矩阵；
2）然后经过两层遍历循环把A矩阵的所有数值赋给B矩阵即可；
3.易错点（很多很傻，大佬不要嘲笑）：
1）矩阵不一定是N阶矩阵，任何矩阵都可以有转置矩阵；
2）因此两次遍历循环的条件大小不一致，一个为原始矩阵的行数，一个为列数；
3）矩阵的行数比较好求，直接A.size();即可，列数的话要A[0].size();
4）所以应该先定义行数和列数，然后再根据原始矩阵的行数和列数再来为新创建的矩阵分配空间大小，否则再分配新矩阵的大小会出现col和row未定义的情况；
5）return应该再两次遍历循环的外面，不要放在最里面是错误的；
6）给新的矩阵分配存储空间时，记得好好看看二维数组用vector是怎么写的，不要只写一个参数；
