1）暴力解法：
#include<iostream>
#include<vector>
#include<algorithm>                                        //使用到了accumulate函数，必须要包含头文件好像algorithm和numeric都可以不知道为哈
using namespace std;
class Solution {
public:
    int sumOddLengthSubarrays(vector<int>& arr) {
    	int len=arr.size();
    	int res=0;
		for(int i=0;i<len;i++){                                //使用i逐个求子序列
			for(int j=1;i+j-1<len;j+=2){                         //j用来逐渐增加为子序列，注意终止条件i+j-1<len,以及因为是奇数序列所以步长为从1开始为2
				res+=accumulate(arr.begin()+i,arr.begin()+i+j,0);  /*这里注意了，第一：accumulate中两个区间必须至少隔一个空，因为相同就返回0（可能再加上最后的默认参数的值）！！！第二：不一定末尾区间用iteratro.end(),用begin()理解容易
			}                                                     第三：注意是res+=XXX，不是res=XXX!!!!累加的一定不要忘记！！！！！！第四：accumulate最后一个参数不可省略！！！参数的意义
		}                                                       要计算的初始值，结果会加上这个默认值（貌似是每计算一次都会加上这个值，一般为零吧除非有特殊要求）
		return res;                                              同时这个函数也算一次n的复杂度，因为要内部要遍历相加！！所以整个时间复杂度为N*3!!!*/
    }            
};
int main(){
	Solution S;
	vector<int> arr={1,3,5};
	int temp=S.sumOddLengthSubarrays(arr);
	cout<<temp<<endl;
	return 0;
}
2）番外篇-前缀和算法：
#include<iostream>
#include<vector>
using namespace std;
class Solution{
public:
	vector<int> presum(vector<int>& arr){
		int len=arr.size();
		vector<int> sum;
		int res=0;                                //注意不要把这个累加和res搞到循环体里面去（第一次就是这样导致出错了！！！！）
		for(auto e:arr){                          //C++11的新语法真的简单!谁用谁知道！！！！！！
			res+=e;
			sum.push_back(res);
		}
		return sum;
	}
};
int main(){
	vector<int> arr={1,2,3,4,5};
	Solution S;
	vector<int> temp=S.presum(arr);
	for(auto e:temp){
		cout<<e<<endl;
	}
	return 0;
}
前缀和算法高级篇:
class Solution {
public:
    int sumOddLengthSubarrays(vector<int>& arr) {
        vector<int> presum{0};                      /*注意这里一定要添加一个元素，因为接下来第一次调用presum.back()函数时，如果数组为空则会出错！！！但问题是这个数组第一个元素为1，
        for(auto e: arr){                            因为用了push_back()函数从屁股一个个插入的！！！*/
			 presum.push_back(presum.back() + e);        	//presum.back()获取当前容量的最后一个元素注意不是最后一个位置的！！的引用即最后一个元素的值，括号里不能有数值！！！
		    }
        int res = 0;
        for(int i = 0; i < arr.size(); i ++){
             for(int sz = 1; i + sz - 1 < arr.size(); sz += 2){
            	res += presum[i + sz] - presum[i];     //因为前面算过了所以不需要每次都算，降低了一个数量级的时间复杂度
			       }       	
		    }
        return res;
    }
};
3.巧妙解法：
class Solution {
public:
    int sumOddLengthSubarrays(vector<int>& arr) {

        int res = 0;
        for(int i = 0; i < arr.size(); i ++){
            int left = i + 1, right = arr.size() - i,
                left_even = (left + 1) / 2, right_even = (right + 1) / 2,
                left_odd = left / 2, right_odd = right / 2;
            res += (left_even * right_even + left_odd * right_odd) * arr[i];         //难点在于理解这个方程
        }
        return res;
    }
};
