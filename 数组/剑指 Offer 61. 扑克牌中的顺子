class Solution {
public:
    bool isStraight(vector<int>& nums) {
        int max_num=INT_MIN;                //注意最大值和最小值要这么设置最好
        int min_num=INT_MAX;
        bool ans=false;
        set<int> s;
        for(auto e:nums){
            if(e==0){             //跳过大小王
                continue;
            }
            if(!s.count(e)){      //如果不存在就插入，存在就直接返回false
                s.insert(e);
            }else{
                return ans;
            }
            min_num=min(min_num,e);   //逐步求出最大值和最小值
            max_num=max(max_num,e);
        }
        if(max_num-min_num<5){
            ans=true;
        }
        return ans;
    }
};
2.自己的排序版本：
class Solution {
public:
    bool isStraight(vector<int>& nums) {
        bool ans=true;
        sort(nums.begin(),nums.end());
        int i=0;
        int cnt=0;
        while(i<4&&nums[i]==0){       //先找出非0的起始位置并且计算多少个0（万能排）
            ++i;
            ++cnt;
        }
        while(i<4){
            if(nums[i]==nums[i+1]){       //如果重复则不符合题意
                ans=false;
                break;
            }
            if(nums[i]+1!=nums[i+1]){     //如果不连续
                if(cnt==0){               //有万能牌面补充的机会
                    ans=false;
                    break;
                }
                nums[i]=nums[i]+1;        //万能排补充到当前i的位置，然后注意cnt--;
                cnt--;
                --i;                            //这个一定不能少，因为最后i要自增，但是万能牌补充了，就不能自增了
            }
            ++i;
        }
        return ans;
    }
};
3.同样利用最大牌-最下牌<5
class Solution {
public:
    bool isStraight(vector<int>& nums) {
        int joker = 0;
        sort(nums.begin(),nums.end()); // 数组排序
        for(int i = 0; i < 4; i++) {
            if(nums[i] == 0) joker++; // 统计大小王数量
            else if(nums[i] == nums[i + 1]) return false; // 若有重复，提前返回 false
        }
        return nums[4] - nums[joker] < 5; // 最大牌 - 最小牌 < 5 则可构成顺子     
    }
};
