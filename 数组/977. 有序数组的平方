1.自己的源代码：
1）简单暴力的解法：
class Solution {                                   //没啥说的，遍历数组，挨个计算，最后排下序，这种方法没啥意思
public:
    vector<int> sortedSquares(vector<int>& A) {
        vector<int> New;
        for(int i=0;i<A.size();i++){
            New.push_back(A[i]*A[i]);
        }
        sort(New.begin(),New.end());
        return New;
    }
};
2）别人的方法：
①：双指针（又是双指针）：
#include<iostream>
#include<vector>
#include<algorithm> 
using namespace std;
class Solution {
public:
    vector<int> sortedSquares(vector<int>& A){
        int len = A.size();                  //注意这里先获取原始vector的size然后创建新的接收数组时候，把size给定义上
        vector<int> ans(len);
        int a = 0, b = len - 1, i = b;
        while (i >= 0)
        {
            int lef = A[a] * A[a]；          //主要这两句要放在while循环体里面，因为每次的左右值都要变化！！且while的循环条件时i>=0;不是right>left;
            int rig = A[b] * A[b];
            if (lef > rig) {
              ans[i] = lef；
              a++;
            }else{
              ans[i] = rig；
              b--;
             }
              i--;                          //使用i--是因为填充的时候从大也就是数组的末尾开始的，所以i要--
        }
        return ans;
    }
    void printf(vector<int> &A){
    	for(vector<int>::iterator iter=A.begin();iter!=A.end();iter++){
    		cout<<*iter<<" ";
		}
	}
};
int main(){
	vector<int> A={-10,-7,0,3,10,11,15,17};
	Solution S1;
	Solution S2;
	vector<int> temp=S1.sortedSquares(A);
	S2.printf(temp);
	return 0;
}
