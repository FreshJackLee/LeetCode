1.解题代码：
1）自己的暴力解法：
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int size=nums.size();
        for(int i=0;i<size ;i++){
            while(nums[i]==val){
                for(int j=i+1;j<size;j++){
                    nums[j-1]=nums[j];
                }
                size--;
            }
        }
        return size;
    }
};
2）别人的暴力解法：
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int size = nums.size();
        for (int i = 0; i < size; i++) {
            if (nums[i] == val) { // 发现需要移除的元素，就将数组集体向前移动一位
                for (int j = i + 1; j < size; j++) {
                    nums[j - 1] = nums[j];
                }
                i--; // 因为下表i以后的数值都向前移动了一位，所以i也向前移动一位
                size--; // 此时数组的大小-1
            }
        }
        return size;

    }
};
3）非暴力解法：
class Solution {                                                 /*非暴力解法使用了双指针（快慢指针），把两层循环的时间复杂度N*2降低为N，快门指针的含义是快指针每次都递增，慢指针
public:
    int removeElement(vector<int>& nums, int val) {                在本题中只有完成了覆盖（或者叫移动操作的时候）才递增，判断条件为不等于时，即慢指针不需要停留在要移除的元素中，可以往前走
        int slowIndex = 0; 
        for (int fastIndex = 0; fastIndex < nums.size(); fastIndex++) {  直到遍历完成，注意点：有人这样写nums[slowIndex++] = nums[fastIndex];和这个程序时一样的，因为i++为先参与运算，然后 
            if (val != nums[fastIndex]) {                                  再进行递增操作，注意这个点，最后只需要返回慢指针即为新的数组长度，但是这个操作有个缺点，如果要重复元素很少
                nums[slowIndex] = nums[fastIndex];                    或者没有重复元素，那么每一个if循环都会进行，都会有额外的赋值操作，这些操作对于这种条件时没有必要的*/
                slowIndex++;
            }
        }
        return slowIndex;
    }
};
非暴力解法二：
public int removeElement(int[] nums, int val) {              /*因为一的缺点，所以引出了二，如果当前元素就是要移除的元素，那么，就把最后一个元素（注意：最后一个元素时nums[n-1]，不是nums[n]!）
    int i = 0;                                                  所以用一个while循环加if循环，注意这里有个技巧，如果最后一个元素仍然是要移除的元素呢，那么我们就要每一次都要对这个元素检查
    int n = nums.length;                                          即，做完一次赋值操作时，i先不要自增，继续判断，如果不是要移除的元素，那么我们就利用else再自增即可完美操作！但是原数组元素顺序会发生变化*/
    while (i < n) {
        if (nums[i] == val) {
            nums[i] = nums[n - 1];
            // reduce array size by one
            n--;
        } else {
            i++;
        }
    }
    return n;
}；
2.解题思路：1）首先想到暴力解法，遍历数组，发现相同的便把后面的元素再加一次for遍历循环依次往前移动一位（注意此时原数组的大小不会自动变化，最后以为的数字还是以前的，因为是覆盖不是移动！）
2）第二层遍历完，size--；
3.易错点：1）第二层遍历循环时，如果用nums[j]=nums[j+1];作为移动的算法会导致数组下标越界，因此解决办法为nums[j-1]=nums[j];(此时j=i+1;)，可完美避免数组下表越界!
2)记得第二层遍历循环后size--;
3）疑问：为啥别人用if循环不会超时，我用了while循环最后提交的时候显示超时了
