class Solution {                                                                    //这个方法有点复杂了，看看就行了，关键是新优化的代码要理解
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> matrix;
        int k=0;                                               //k和m分别代表起始坐标和末尾坐标！！
        int m=nums.size()-1;
        perm(nums,k,m,matrix);
        return matrix;
    }
    void perm(vector<int> &nums,int k,int m,vector<vector<int>> &matrix){
        if(k==m){
            matrix.push_back(nums);                           //注意这里，在这个函数里直接把nums插入到矩阵的末端，并且注意这个函数返回值是void，且要return
            return;
        }else{
            for(int j=k;j<=m;j++){
                swap(nums[k],nums[j]);                        //分别固定到第一个位置
                perm(nums,k+1,m,matrix);
                swap(nums[k],nums[j]);                       //这里很关键，要理解为哈要返回，因为每一次的枝节都是从最初始的状态开始的，如果没有回去则是最后一次返回的结果排列，肯定漏很多！！！
            }
        }                                                      //一定要仔细体会这个算法！！！！
    }
};
新优化的解法：
class Solution {
public:
    vector<string> permutation(string s) {
        int m=s.size();
        set<string> ss;                                         //利用set的特性来去除结果的重复（结果重复来源于每个元素并不是完全不同的，可能有相同的值，所以会出现重复）
        vector<string> vs;
        perm(s,0,ss);
        for(auto e:ss){                                         //巧用C++11的范围for语句，极大简化代码
            vs.push_back(e);
        }
        return vs;
    }
    void perm(string s,int k,set<string>& ss){
        if(k==s.size()){
            ss.insert(s);
        }else{
            for(int i=k;i<s.size();++i){
                swap(s[i],s[k]);
                perm(s,k+1,ss);
                swap(s[i],s[k]);
            }
        }
    }
};
3.剪枝操作：
class Solution {
public:
    vector<string> permutation(string s) {
        vector<string> ans;
        int len=s.size()-1;
        sort(s.begin(),s.end());
        dfs(s,ans,0,len);
        return ans;
    }
    void dfs(string& s,vector<string>& ans,int k,int& len){
        if(k==len){
            ans.push_back(s);
            return ;
        }else{
            set<char> temp;                              //注意是每一次固定的时候都要创建这个变量不能是引用共用一个
            for(int i=k;i<=len;++i){
                if(temp.find(s[i])!=temp.end()){            //重复的本质是固定位置的时候重复固定，因此在固定的时候检查是否固定过
                    continue;                               //如果固定过，即set里面找到了，不用固定了，继续下一次for循环即可
                }
                temp.insert(s[i]);
                swap(s[i],s[k]);
                dfs(s,ans,k+1,len);
                swap(s[i],s[k]);
            }
        }
    }
};
