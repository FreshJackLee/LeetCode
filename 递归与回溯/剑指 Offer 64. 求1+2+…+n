1.利用递归和逻辑运算的短路特性：所以，精髓就是，通过递归替代循环。通过短路运算符来替代条件判断。
class Solution {            //利用递归解决，不能用一：等差数列前N项和（有乘法），二：循环从1加到N；
public:
    int sumNums(int n) {
        n&&(n+=sumNums(n-1)); 
        return n;
    }
};
2.利用快速乘和移位运算
首先是俄罗斯乘法的算法原理：（结合这个原理https://cloud.tencent.com/developer/article/1643157）
int quickMulti(int A, int B) {
    int ans = 0;
    for ( ; B; B >>= 1) {     //循环判断每一位是否为1，如果为1则对结果有贡献！！！
        if (B & 1) {    //从低位开始判断是否为1，如果为一，则对结果有贡献
            ans += A;
        }
        A <<= 1;                    //这里相当于原始的A*2^i，仔细体会
    }
    return ans;
}
class Solution {
public:
    int sumNums(int n) {
        int ans = 0, A = n, B = n + 1;

        (B & 1) && (ans += A);        //下面是实际是代替循环语句，多余的其实没有实际的计算过程
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        (B & 1) && (ans += A);
        A <<= 1;
        B >>= 1;

        return ans >> 1;
    }
};
