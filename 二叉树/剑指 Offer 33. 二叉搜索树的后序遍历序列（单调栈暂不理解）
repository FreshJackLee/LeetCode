1.利用递归：本身合理，左子树和右子树分别合理
class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        return recur(postorder, 0, postorder.size()-1);
    }
    bool recur(vector<int>& postorder, int i, int j) {
        if(i >= j){                                       //递归终止条件
            return true;
        }
        int index = i;
        while(postorder[index] < postorder[j]){                   //从左往右遍历找出第一个大于根节点的值即为右子树的起点区间
            ++index;
        }
        int right = index;
        while(postorder[index] > postorder[j]){                   //继续找全这个区间，直到最后一个元素
            ++index;
        }                   //下面的返回条件：1.自己本身合理，理由最后一行注释。2.左子树合理。3.右子树合理
        return index == j && recur(postorder, i, right - 1) && recur(postorder, right, j - 1);
    }                     //本身的左子树不用判断，因为已经是划分正确了，找到了所有比根节点小的值！！！！
};                        //注意返回条件一定先判断自己是否是二叉搜索树的后续遍历：即右子树（从第一个大于根节点到根节点之前）全部比根节点大
2.利用单调栈：
class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        stack<int> st;
        int root = INT_MAX;
        st.push(root);
        for(int i = postorder.size()-1; i >= 0; i--) {          //这里不用真的反转后序遍历，反着遍历即可实现
            if(postorder[i] > root){
                return false;
            }
            while(!st.empty() && st.top() > postorder[i]){
            	root = st.top();
              st.pop();
            }
            st.push(postorder[i]);
        }
        return true;
    }
};
