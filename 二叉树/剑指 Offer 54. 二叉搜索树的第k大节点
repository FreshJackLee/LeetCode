1.递归版本：
class Solution {
public:
    int kthLargest(TreeNode* root, int k) {
        int ans;
        dfs(root,ans,k);
        return ans;
    }
    void dfs(TreeNode* root,int& ans,int& k){     //注意技巧，二次调用函数，同时用引用共享变量
        if(!root){
            return;
        }
        dfs(root->right,ans,k);           //注意把每一个节点看作是依次递归的函数栈空间（便于理解）
        k--;                              //如果返回，说明是没有子节点了，并且达到了最多深度，因此此时是最大值
        if(k==0){
            ans=root->val;
            return;
        }
        dfs(root->left,ans,k);                //继续看左子树的情况，这一步不要忘记了！！！
    }
};
2.迭代版本：（利用栈）
class Solution {
public:
    int kthLargest(TreeNode* root, int k) {
        stack<TreeNode*> st;
        int ans;
        while(root||!st.empty()){
            while(root){
                st.push(root);
                root=root->right;
            }
            root=st.top();
            st.pop();
            k--;
            if(k==0){
                ans=root->val;
                return ans;
            }
            root=root->left;
        }
        return -1;
    }
};
