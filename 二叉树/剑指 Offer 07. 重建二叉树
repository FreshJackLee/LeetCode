别人的代码：
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {                //输入两个非重复节点的树，一个先序遍历，一个中序遍历，重构这颗二叉树
        this->preorder = preorder;                                                    //因为是引用传参，所以类的内部先定义一个先序遍历的数组
        for(int i = 0; i < inorder.size(); i++)                                       //利用字典，键为中序遍历的节点的值域，值为下标i，目的是当找到根节点，需要在中序遍历找到这个根节点，来划分子问题
            dic[inorder[i]] = i;                     哈希查找
        return recur(0, 0, inorder.size() - 1);                                       //递归回调
    }
private:
    vector<int> preorder;
    unordered_map<int, int> dic;
    TreeNode* recur(int root, int left, int right) {                                 //对每一个子问题进行分治
        if(left > right) return nullptr;                        // 递归终止            Left和right的下标
        TreeNode* node = new TreeNode(preorder[root]);          // 建立根节点
        int i = dic[preorder[root]];                哈希调用            // 划分根节点、左子树、右子树，即重构的步骤--先在先序遍历中找到根节点preorder[root]，然后再找到这个根节点所在中序遍历的位置
        node->left = recur(root + 1, left, i - 1);              // 开启左子树递归
        node->right = recur(root + i - left + 1, i + 1, right); // 开启右子树递归
        return node;                                            // 回溯返回根节点
    }
};
第二次刷：
前序遍历列表：第一个元素永远是 【根节点 (root)】
中序遍历列表：根节点 (root)【左边】的所有元素都在根节点的【左分支】，【右边】的所有元素都在根节点的【右分支】
算法思路：

通过【前序遍历列表】确定【根节点 (root)】
将【中序遍历列表】的节点分割成【左分支节点】和【右分支节点】
递归寻找【左分支节点】中的【根节点 (left child)】和 【右分支节点】中的【根节点 (right child)】
1.递归官方解题：
class Solution {
private:
    unordered_map<int, int> index;

public:
    TreeNode* myBuildTree(const vector<int>& preorder, const vector<int>& inorder, int preorder_left, int preorder_right, int inorder_left, int inorder_right) {
        if (preorder_left > preorder_right) {
            return nullptr;
        }
        
        // 前序遍历中的第一个节点就是根节点
        int preorder_root = preorder_left;
        // 在中序遍历中定位根节点
        int inorder_root = index[preorder[preorder_root]];
        
        // 先把根节点建立出来
        TreeNode* root = new TreeNode(preorder[preorder_root]);
        // 得到左子树中的节点数目
        int size_left_subtree = inorder_root - inorder_left;
        // 递归地构造左子树，并连接到根节点
        // 先序遍历中「从 左边界+1 开始的 size_left_subtree」个元素就对应了中序遍历中「从 左边界 开始到 根节点定位-1」的元素
        root->left = myBuildTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left, inorder_root - 1);
        // 递归地构造右子树，并连接到根节点
        // 先序遍历中「从 左边界+1+左子树节点数目 开始到 右边界」的元素就对应了中序遍历中「从 根节点定位+1 到 右边界」的元素
        root->right = myBuildTree(preorder, inorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1, inorder_right);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        // 构造哈希映射，帮助我们快速定位根节点
        for (int i = 0; i < n; ++i) {
            index[inorder[i]] = i;
        }
        return myBuildTree(preorder, inorder, 0, n - 1, 0, n - 1);
    }
};
2.自己的版本：
class Solution {
    unordered_map<int,int> index;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode* root;
        int n=preorder.size();
        for(int i=0;i<n;++i){
            index[inorder[i]]=i;
        }
        root=recurBuildTree(preorder,inorder,0,n-1,0,n-1);
        return root;
    }
    TreeNode* recurBuildTree(vector<int>& preorder,vector<int>& inorder,int preorder_begin,int preorder_end,int inorder_begin,int inorder_end){
        if(preorder_begin>preorder_end){              //注意递归返回的条件，因为是区间不断收缩，当区间不满足的时候返回！！！
            return nullptr;
        }
        TreeNode* root=new TreeNode(preorder[preorder_begin]);
        int inorder_root=index[preorder[preorder_begin]];
        int length_left=inorder_root-inorder_begin;
        root->left=recurBuildTree(preorder,inorder,preorder_begin+1,preorder_begin+length_left,inorder_begin,inorder_root-1);
        root->right=recurBuildTree(preorder,inorder,preorder_begin+length_left+1,preorder_end,inorder_root+1,inorder_end);
        return root;
    }
};
3.迭代解法：
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        if(!n){
            return nullptr;
        }
        TreeNode* root=new TreeNode(preorder[0]);
        stack<TreeNode*> st;            //栈放的是节点，不是节点的值
        st.push(root);
        int index=0;
        int first_right;
        TreeNode* node;
        for(int i=1;i<n;++i){
            node=st.top();
            first_right=preorder[i];                      //注意这个变量是标记可能是第一个右拐的节点！！！仔细体会
            if(node->val!=inorder[index]){
                node->left=new TreeNode(preorder[i]);
                st.push(node->left);
            }else{
                while(!st.empty()&&inorder[index]==st.top()->val){
                    node=st.top();
                    ++index;
                    st.pop();
                }
                node->right=new TreeNode(first_right);
                st.push(node->right);                       //最后不要忘记把这个节点入栈
            }
        }
        return root;
    }
};
