class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {                     //没有初始化的原因可能是在开数组的时候默认i=0 or j=0 dp[i][j]=0,所以省略了初始化问题
        int length1 = text1.length();
        int length2 = text2.length();
        vector<std::vector<int>> dp(length1 + 1, vector<int>(length2+1,0));     //首先开一个二维数组，数组的值代表在字符串a从头到i和字符串b从头到j下的最长公共子序列的长度！！！一定要理解
        for (int i = 1; i < length1 + 1; ++i) {                                 //注意这个写法是从1开始的（按理来说从0也是可以的）
            for (int j = 1; j < length2 + 1; ++j) {                       //注意是如果转化为子问题并缩小规模的！！！
                if (text1[i - 1] == text2[j - 1]) {                      //想法:如果两个字符串都有相同的字符，那么必然dp[i][j]等于左上角的dp[i-1][j-1]+1！！！（具体思路看下递归思想）
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);          //否则的话，要看两边（左边和上边）的最大值
                }
            }
        }
        return dp[length1][length2];                                           //所有这个数组的值代表字符串text1从头到尾和字符串text2从头到尾的最长公共子序列的长度(注意从1开始了不是0)
    }
};

动态规划子问题缩小规模辅助思想递归：
def longestCommonSubsequence(str1, str2) -> int:
    def dp(i, j):
        # 空串的 base case
        if i == -1 or j == -1:
            return 0
        if str1[i] == str2[j]:
            # 这边找到一个 lcs 的元素，继续往前找                            //缩小子问题的规模！！！注意是倒序查找，但是方向是往前面的，这是递归的理解，实际是由底往上的！！！
            return dp(i - 1, j - 1) + 1
        else:
            # 谁能让 lcs 最长，就听谁的
            return max(dp(i-1, j), dp(i, j-1))
        
    # i 和 j 初始化为最后一个索引
    return dp(len(str1)-1, len(str2)-1)
