class Solution {
public:
    int climbStairs(int n) {
        vector<int> f(n+1);             //动态规划第一步，先开数组之类的
        f[0]=1;                         //动态规划第二部，初始化
        f[1]=1;
        for(int i=2;i<n+1;i++){         //动态规划第三步，遍历循环，同时处理边界条件（数组越界，循环退出条件等）
            f[i]=f[i-1]+f[i-2];         //动态规划的动态方程（子问题的求解）
        }
        return f[n];                    //记得return的是哪一个！！！！
    }
};

2020-9-6 字节跳动笔试题第一题就是这个题目。 但是题目做了修改（限制条件做了修改，加了第二个限制条件）： 
1、每次你可以爬 1 或 2 个台阶。 2、不能连续跳两个台阶。（个人理解为这次跳了两个台阶，下次不能再跳两个台阶）
变化之后的题目，，如何解？？？

题目里“不能连续跳两个台阶”，即一旦跳了两个台阶，则下一步只能跳一步（2->1），把它们连在一起就一共跳了三个台阶，所以问题可以转化为：
要么跳一个台阶，要么跳三个台阶（当然还是有点区别的，只不过因为结果是一样的，所以可以这么转化），于是就有了 f(x) = f(x-1) + f(x-3)

public int climbStarts2(int n) {
  if(n == 1) return 1; // 防止数组溢出（f[2]）
  int[] f = new int[n+1];
  f[0] = 1;
  f[1] = 1;
  f[2] = 2;
  for(int i = 3; i <= n; i++) {
  f[i] = f[i-1] + f[i-3];
  }
  return f[n];
  }
