1.自己错误的代码：
class Solution {
public:
    int minArray(vector<int>& numbers) {
		int len=numbers.size();
		if(len==0){
			return -1;
		}
		int ans=numbers[0];
		int left=0;
		int right=len-1;
		int middle;                                 //利用有序结构，跳跃式缩小区间
		while(left<=right){
			middle=right-(right-left)/2;
			if(numbers[left]<numbers[middle]){            //如果大于left，那么middle一定落在目标值的左边，所以向右收缩区间
				left=middle+1;
			}else if(numbers[left]>numbers[middle]){
				if(numbers[middle-1]>numbers[middle]){
					ans=min(numbers[0],numbers[middle]);
					break;
				}
				right=middle-1;
			}else{                                //如果等于，这个比较麻烦，这里是错误的，有可能在左区间，有可能在右区间，这里处理有问题
				ans=min(numbers[0],numbers[left]);
				break;
			}
		}
		return ans;
    }
};
2.错误代码二：
class Solution{
public:
	int  minArray(vector<int>& a){
		int len=a.size();
		if(len==0){
			return -1;
		}
		int ans=a[0];
		int left=0;
		int right=len;
		int middle;
		while(left<right){            //同1，错误的思想是和left对比，如果有相同元素，那么收缩区间可能会出现错误！！！！！
			middle=left+(right-left)/2;
			if(a[left]<=a[middle]){
				left=middle+1;
			}else{
				if(a[middle-1]>a[middle]){
					ans=min(ans,a[middle]);
					break;
				}
				right=middle;
			}
		}
		return ans;
	}
};
3.正确代码：
class Solution {
public:
    int minArray(vector<int>& numbers) {
        int low = 0;
        int high = numbers.size() - 1;
        while (low < high) {                              //正确应该和right对比
            int pivot = low + (high - low) / 2;
            if (numbers[pivot] < numbers[high]) {         //如果中值小于right，那么要向左收缩
                high = pivot;
            }
            else if (numbers[pivot] > numbers[high]) {        //如果大于右值，那么要向右手速区间
                low = pivot + 1;
            }
            else {                                      //如果等于右值，有可能在左边区间，不能大幅收缩
                high -= 1;
            }
        }
        return numbers[low];
    }
};
