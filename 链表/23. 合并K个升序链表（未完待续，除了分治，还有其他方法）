1.自己错误的代码（利用归并排序的思路）
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int low=0;
        int high=lists.size()-1;
        ListNode* prehead=new ListNode(-1);
        ListNode* end=prehead;
        if(high<=0){
            return lists[0];
        }           
        mergeLists(end,lists,low,high);
        return prehead->next;
    }
    void mergeLists(ListNode* end,vector<ListNode*>& lists,int low,int high){     //不能原地排序，因为如果出现空链表，那么就会出错！！！
        int middle;
        if(low<high){
            middle=(low+high)>>1;
            mergeLists(end,lists,low,middle);
            mergeLists(end,lists,middle+1,high);
            Merge(end,lists[low],lists[high]);
        }
    }
    void Merge(ListNode* end,ListNode* l1,ListNode* l2){
        while(l1&&l2){
            if(l1->val<=l2->val){                             //注意思路：确定过程永远是找出一个当前最小值合并入链表尾端
                end->next=l1;  
                l1=l1->next;
            }else{
                end->next=l2;
                l2=l2->next;
            }
            end=end->next;
        }
        end->next=(l1?l1:l2);                 //如果出现空链表就单独执行这一行代码，另一个半也执行这个代码，无法做到有序输出，即使做一个
    }                                           //end=end->next，那么仍旧是无法有序结构，因为：[[],[-1,5,11],[],[6,10]]这样的会出错
};
2.自己还未找出错误的代码：
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1,ListNode* l2){
        if(!l1 || !l2){
            return l1?l1:l2;
        }
        ListNode* prehead=new ListNode(-1);
        ListNode* end=prehead;
        while(l1&&l2){
            if(l1->val<=l2->val){                             //注意思路：确定过程永远是找出一个当前最小值合并入链表尾端
                end->next=l1;  
                l1=l1->next;
            }else{
                end->next=l2;
                l2=l2->next;
            }
            end=end->next;
        }
        end->next=(l1?l1:l2);
        return prehead->next;
    }
    ListNode*  merge(vector<ListNode*>& lists,int low,int high){        //分而治之
        int middle;
        ListNode* head;
        if(low<high){
            middle=(low+high)>>1;
            ListNode* l1=merge(lists,low,middle);
            ListNode* l2=merge(lists,middle+1,high);
            head=mergeTwoLists(l1,l2);
        }
        return head;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return merge(lists,0,lists.size()-1);
    }
};
3.官方代码：
class Solution {
public:
    ListNode* mergeTwoLists(ListNode *a, ListNode *b) {     //注意函数的前后顺序，必须先定义或者声明后才能使用
        if ((!a) || (!b)) return a ? a : b;
        ListNode head, *tail = &head, *aPtr = a, *bPtr = b;       //这里是为了防止传入的链表丢失，所以没有原位操作
        while (aPtr && bPtr) {
            if (aPtr->val < bPtr->val) {
                tail->next = aPtr; aPtr = aPtr->next;
            } else {
                tail->next = bPtr; bPtr = bPtr->next;
            }
            tail = tail->next;
        }
        tail->next = (aPtr ? aPtr : bPtr);      //这一步不要忘记了
        return head.next;
    }

    ListNode* merge(vector <ListNode*> &lists, int l, int r) {
        if (l == r) return lists[l];                    //只有一个链表返回即可，注意是l不是1！！！！
        if (l > r) return nullptr;                      //如果传入空链表vector，即lists.size()-1==-1;
        int mid = (l + r) >> 1;
        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return merge(lists, 0, lists.size() - 1);
    }
};
