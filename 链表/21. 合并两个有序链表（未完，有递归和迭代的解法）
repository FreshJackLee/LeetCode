/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode dummy(-1);                             //引入哑节点避免边界问题，最后输出链表时返回dummy.next即可放弃这个哑节点
        ListNode *pre=&dummy;                           //引入一个指针目的是记录最后一个接上的节点
        while(l1!=nullptr&&l2!=nullptr){                //只要不为空，即可进入循环，注意不是l1->next==nullptr！！！l1->next代表l1的下一个节点不是当前节点！！！
            if(l1->val>=l2->val){
                pre->next=l2;                           //这个注意是pre->next！！！！
                l2=l2->next;
            }else{
                pre->next=l1;
                l1=l1->next;
            }
            pre=pre->next;                             //最后不要忘记pre要移动！！！！！
        }
        if(l1==nullptr){
            pre->next=l2;
        }else if(l2==nullptr){
            pre->next=l1;
        }
        return dummy.next;
    }
};
官方最新代码：
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* preHead = new ListNode(-1);                                   //优化一：利用new来分配节点
    
        ListNode* prev = preHead;
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val < l2->val) {
                prev->next = l1;
                l1 = l1->next;
            } else {
                prev->next = l2;
                l2 = l2->next;
            }
            prev = prev->next;
        }

        // 合并后 l1 和 l2 最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可
        prev->next = l1 == nullptr ? l2 : l1;                                                               //优化二：利用条件变量简化代码量！！

        return preHead->next;
    }
};
