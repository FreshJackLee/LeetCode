class Solution {                                                     //leetcode官方的代码
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *head = nullptr, *tail = nullptr;                   //head为新建链表的表头节点，tail为表尾节点，同时执行初始化，每次从前往后添加节点是把尾巴延伸！！！！以后注意这种套路！      
        int carry = 0;                                               //进位，注意体会这种思想
        while (l1 || l2) {                                           //当指针做为判断条件的时候，是问改指针是否为空？如果指针为空，那么表达式为false，否则为true，空指针暂时理解为0
            int n1 = (l1 ? l1->val: 0);                                //注意利用条件表达式（不要从执行上理解，从结果上理解，如果条件真，那么结果为中间表达式的值）简化代码，这里有个技巧，如果链表的长度不一样，长度短的虚空节点用0来替换
            int n2 = (l2 ? l2->val: 0);
            int sum = n1 + n2 + carry;                               //加法的本质，两数相加等于两数之和再加上进位！仔细体会（从十进制多位数的加法的角度）
            if (!head) {                                             //如果头节点为空
                head = tail = new ListNode(sum % 10);                //相当于刚开始头节点和尾巴节点是一个节点
            } else {
                tail->next = new ListNode(sum % 10);                 //否则，创建一个这样的尾节点！！！！！注意这里如何创建一个节点，用⭐node->next=new type(val)!!!⭐学会这种套路！！！
                tail = tail->next;                                   //然后tail移动
            }
            carry = sum / 10;                                        //十进制加法，因为题目给出了只能存储一位，所以这样可行
            if (l1) {
                l1 = l1->next;                                       //如果l1不为空（即有数据，地址一定不为零），那么l1移动到下一个节点
            }
            if (l2) {                                                //l2同l1
                l2 = l2->next;
            }
        }
        if (carry > 0) {                                             //如果进位大于零，即存在进位，那么继续创建一个存储这个进位作为数据域的节点
            tail->next = new ListNode(carry);
        }
        return head;                                                 //返回这个链表
    }
};
