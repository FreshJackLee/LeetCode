class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {        //用双指针，但是注意下面的错误点，这道题用双指针不太好，边界条件有点烦人
        if(head==NULL||head->next==NULL)
            return head;
        ListNode *last=head;
        ListNode *first=head->next;
        while(last->next!=NULL){
            while(last->val==first->val){             //这里是错误的，这个循环有问题比如 1 1 1 1这样的，first在循环中会指向空指针，但是空指针的节点不能取值对比，所以运行出错！！！
                first=first->next;
            }
            if(first==NULL){
                last->next=NULL;
            }else{
                last->next=first;
                first=first->next;
                last=last->next;
            }        
        }
        return head;
    }
};
别人的单指针法：
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head){               //判断是否为空，但是单节点不需要判断，因为单节点的next指针域一定是NULL，进不去下面的循环
            return head;
        }
        ListNode *p=head;
        while(p->next!=NULL){
            if(p->val == p->next->val){
                p->next=p->next->next;             //！！！！！注意这种连续的这个->太巧妙了，太巧妙了！！！！
            }else{
                p=p->next;
            }
        }
        return head;
    }
};
