/**
 * Definition for singly-linked list.
 * struct ListNode {                           //链表的结构体，或者在C++中直接说是链表类
 *     int val;                                 //链表的数据域
 *     ListNode *next;                           //单链表的指针域
 *     ListNode(int x) : val(x), next(NULL) {}    //这里注意了，是初始化，可以理解为C++中类的构造函数初始化列表，注意后面的大括号不要忘记了
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slow=head;                   //这里定义快慢指针的时候要注意，是ListNode*不是int*!!!!!指向ListNode数据类型的指针！！！！
        ListNode* fast=head;
        while(fast!=nullptr){                  /*这里为快指针的操作，先判断是否指向空，即链表末端，如果不为空说明后面还有节点，
            fast=fast->next;                     注意链表指针的移动方式是这样进行的，不能使用Ptr++!!!!!
            if(fast!=nullptr){                  继续判断后面还有没有节点
                fast=fast->next;                  有节点继续移动！！！！*/
                if(fast==slow){                 //如果相遇了，那么说明有环，返回ture
                    return true;
                }
            }
            slow=slow->next;                    //循环体内最后一步不要忘记慢指针也要移动!!!
        }
        return nullptr;                         //nullptr是C++的关键字，代表空指针（以后尽量用nullptr不要用NULL）
    }
};
