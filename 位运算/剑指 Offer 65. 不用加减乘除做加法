1.加法不要忘记和+进位
class Solution {
public:
    int add(int a, int b) {
        while(b != 0) { // 当进位为 0 时跳出
            int c = (unsigned int)(a & b) << 1;  // c = 进位
            a ^= b; // a = 非进位和
            b = c; // b = 进位
        }
        return a;
    }
};
容易理解的版本：
class Solution {
public:
    int add(int a, int b) {
        int sum=a^b;
        int carry=(unsigned int)(a&b)<<1;           //c++不支持负数左移
        while(carry!=0){        //因为不能用加法，所以要一直循环移位计算，直到进位没有了，计算才结束！！！
            a=sum;
            b=carry;
            sum=a^b;
            carry=(unsigned int)(a&b)<<1;
        }
        return sum;
    }
};
2.递归形式：       //递归更容易理解！！！
class Solution {
public：
    int add(int a, int b) {
        if (b == 0) {
            return a;
        }
        
        // 转换成非进位和 + 进位
        return add(a ^ b, (a & b) << 1);
    }
};
